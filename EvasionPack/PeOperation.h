#pragma once
#ifndef PACK_PeOperation_H
#define PACK_PeOperation_H
#include <Windows.h>
#include <tchar.h>
#include "Common.h"

//PE结构的信息结构体
typedef struct PEInformation
{
	POINTER_TYPE FileBuffer;			//文件在内存里的地址
	POINTER_TYPE FileSize;				//文件大小
	POINTER_TYPE e_lfanes;				//PE文件头地址
	POINTER_TYPE NumberOfSections;		//区段数目
	POINTER_TYPE SizeOfOptionHeaders;	//可选头大小
	POINTER_TYPE SizeOfCode;			//代码节大小
	POINTER_TYPE AddressOfEntryPoint;	//OEP(RVA)入口点
	POINTER_TYPE BaseOfCode;			//代码基址
	POINTER_TYPE BaseOfData;			//数据基址
	POINTER_TYPE ImageBase;				//镜像基址
	POINTER_TYPE SectionAlignment;		//内存对齐
	POINTER_TYPE FileAlignment;			//文件对齐
	POINTER_TYPE SizeofImage;			//镜像大小
	POINTER_TYPE SizeOfHeaders;			//头大小
	IMAGE_DATA_DIRECTORY* DataDirectory;	//目录
	PIMAGE_NT_HEADERS pNtHeader;			//Nt头
	PIMAGE_SECTION_HEADER pSectionHeader;	//节头
	PIMAGE_OPTIONAL_HEADER OptionalHeader;	//可选PE头

}PEInfo, * pPEInfo;


class PeOperation 
{

public:
	/*////////////////////////////////////////////////////////////////
	*※※*  FullName:		AlignSize － 取整对齐函数
	*※※*  Returns:		返回对齐后的数值
	*※※*  Parameter_1:	uSize,输入的数值
	*※※*  Parameter_2:	uSecAlignment，文件对齐或者内存对齐数值
	*※※*  Parameter_3:
	*※※*  Parameter_4:
	*※※*	Parameter_5:
	*※※*	Author:		    LCH
	*/////////////////////////////////////////////////////////////////;
	ULONG_PTR AlignSize(_In_ ULONG_PTR uSize, ULONG_PTR uSecAlignment)
	{
		//return (uSize % uSecAlignment == 0) ? uSize : (uSize - (uSize % uSecAlignment) + uSecAlignment);
		return ((uSize + uSecAlignment - 1) / uSecAlignment * uSecAlignment);
	};

public:

	/*////////////////////////////////////////////////////////////////
	*※※*  FullName:	PerformBaseRelocation - 修复重定位表
	*※※*  Returns:	无
	*※※*  Parameter:	char* buff,PE文件首地址(拉伸后)
	*※※*  Parameter:	DWORD Value，PE基址与当前在内存中的地址的差值
	*※※*  Parameter:
	*※※*  Parameter:
	*※※*	Parameter:
	*※※*	Author:		    LCH
	*/////////////////////////////////////////////////////////////////;
	void PerformBaseRelocation(POINTER_TYPE buff, POINTER_TYPE Value);


	/*////////////////////////////////////////////////////////////////
	*※※*  FullName:	RebuildImportTable - 修复IAT表
	*※※*  Returns:	成功返回1，失败返回0
	*※※*  Parameter:	char* buff，PE文件在内存中的地址(拉伸后)
	*※※*  Parameter:
	*※※*  Parameter:
	*※※*  Parameter:
	*※※*	Parameter:
	*※※*	Author:		    LCH
	*/////////////////////////////////////////////////////////////////;
	BOOL RebuildImportTable(POINTER_TYPE buff);

	/*////////////////////////////////////////////////////////////////
	*※※*  FullName:		GET_HEADER_DICTIONARY
	*※※*  功能	:		获取目录表的地址
	*※※*  Returns:		成功则返回要查询的那张目录表的内存偏移
	*※※*  Parameter_1:	module，模块的地址
	*※※*  Parameter_2:	idx,要查询哪张表
	*※※*  Parameter_3:
	*※※*  Parameter_4:
	*※※*	Parameter_5:
	*※※*	Author:		    LCH
	*/////////////////////////////////////////////////////////////////;
	DWORD GET_HEADER_DICTIONARY(POINTER_TYPE module, int idx);


	/*////////////////////////////////////////////////////////////////
	*※※*  FullName:		GetPEInformation_
	*※※*  功能	:		打开一个文件，拷贝进内存，获取PE文件的各种信息
	*※※*  Returns:		成功返回1，失败返回0
	*※※*  Parameter_1:	FilePath,文件路径
	*※※*  Parameter_2:	pPEInfor，输出参数,把得到的PE信息存放到pPEInfor结构体里
	*※※*  Parameter_3:
	*※※*  Parameter_4:
	*※※*	Parameter_5:
	*※※*	Author:		    LCH
	*/////////////////////////////////////////////////////////////////;
	bool GetPEInformation_(TCHAR* FilePath, _Out_ PEInformation* pPEInfor);


	/*////////////////////////////////////////////////////////////////
	*※※*  FullName:		GetPEInformation_1
	*※※*  功能	:		根据内存模块，获取PE文件的各种信息
	*※※*  Returns:		成功返回1，失败返回0
	*※※*  Parameter_1:	pFilebuff，模块的地址
	*※※*  Parameter_2:	pPEInfor，输出参数，把得到的PE信息存放到pPEInfor结构体里
	*※※*  Parameter_3:	dwFileSize，模块的文件大小
	*※※*  Parameter_4:
	*※※*	Parameter_5:
	*※※*	Author:		    LCH
	*/////////////////////////////////////////////////////////////////;
	bool GetPEInformation_1(char* pFilebuff, _Out_ PEInformation* pPEInfor, _In_ DWORD dwFileSize = 0);


	/*////////////////////////////////////////////////////////////////
	*※※*  FullName:		addSeciton
	*※※*  功能	:		添加新节
	*※※*  Returns:		成功返回1，失败返回0
	*※※*  Parameter_1:	pFileBuff，模块地址
	*※※*  Parameter_2:	AddSize，要添加的大小
	*※※*  Parameter_3:	secname[8]，新节名称，限制在八个字节内
	*※※*  Parameter_4:
	*※※*	Parameter_5:
	*※※*	Author:		    LCH
	*/////////////////////////////////////////////////////////////////;
	bool addSeciton(POINTER_TYPE pFileBuff, DWORD AddSize, char secname[8] = { 0 });


	/// <summary>
	/// 加载PE文件
	/// </summary>
	/// <param name="FileName"></param>
	/// <param name="Peinfo"></param>
	/// <returns></returns>
	BOOLEAN LoadExeFile(TCHAR* FileName, PEInformation* Peinfo);// 读取目标程序

	/// <summary>
	/// 判断是否是PE文件
	/// </summary>
	/// <param name=""></param>
	/// <param name=""></param>
	/// <returns></returns>
	BOOLEAN IsPEFile(POINTER_TYPE pFileBuffer);


	/// <summary>
	/// 获取Pe文件信息
	/// </summary>
	/// <param name="Peinfo"></param>
	/// <returns></returns>
	BOOLEAN GetPeInfo(POINTER_TYPE Pe, PEInformation* Peinfo);

	void SaveFile(PEInformation Peinfo);


	void AddSection(POINTER_TYPE Base, POINTER_TYPE DllBase, PEInformation* Peinfo);


	PIMAGE_SECTION_HEADER GetSection(POINTER_TYPE Base, LPCSTR SectionName);


	VOID FixReloc(POINTER_TYPE Base, POINTER_TYPE DllBase);

	VOID CopySectionData(POINTER_TYPE Base, POINTER_TYPE DllBase);
};

#endif